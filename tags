!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Python	nameref	/the original name for the tag/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Python	I,namespace	/name referring a module defined in other file/
!_TAG_KIND_DESCRIPTION!Python	Y,unknown	/name referring a class\/variable\/function\/module defined in other module/
!_TAG_KIND_DESCRIPTION!Python	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Python	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Python	i,module	/modules/
!_TAG_KIND_DESCRIPTION!Python	m,member	/class members/
!_TAG_KIND_DESCRIPTION!Python	v,variable	/variables/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Python	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/Ivo/Documents/Leiden/Master/2023/Voorjaar/ReinforcementLearning/RL_A1/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	//
!_TAG_ROLE_DESCRIPTION!Python!module	imported	/imported modules/
!_TAG_ROLE_DESCRIPTION!Python!module	indirectlyImported	/module imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Python!module	namespace	/namespace from where classes\/variables\/functions are imported/
!_TAG_ROLE_DESCRIPTION!Python!unknown	imported	/imported from the other module/
!_TAG_ROLE_DESCRIPTION!Python!unknown	indirectlyImported	/classes\/variables\/functions\/modules imported in alternative name/
LCTest	Helper.py	/^    LCTest = LearningCurvePlot(title="Test Learning Curve")$/;"	v
LearningCurvePlot	Helper.py	/^class LearningCurvePlot:$/;"	c
MonteCarloAgent	MonteCarlo.py	/^class MonteCarloAgent:$/;"	c
NstepQLearningAgent	Nstep.py	/^class NstepQLearningAgent:$/;"	c
QLearningAgent	Q_learning.py	/^class QLearningAgent:$/;"	c
QValueIterationAgent	DynamicProgramming.py	/^class QValueIterationAgent:$/;"	c
Q_value_iteration	DynamicProgramming.py	/^def Q_value_iteration(env, gamma=1.0, threshold=0.001):$/;"	f
SarsaAgent	SARSA.py	/^class SarsaAgent:$/;"	c
StochasticWindyGridworld	Environment.py	/^class StochasticWindyGridworld:$/;"	c
__init__	DynamicProgramming.py	/^    def __init__(self, n_states, n_actions, gamma, threshold=0.01):$/;"	m	class:QValueIterationAgent
__init__	Environment.py	/^    def __init__(self,initialize_model=True):$/;"	m	class:StochasticWindyGridworld
__init__	Helper.py	/^    def __init__(self,title=None):$/;"	m	class:LearningCurvePlot
__init__	MonteCarlo.py	/^    def __init__(self, n_states, n_actions, learning_rate, gamma):$/;"	m	class:MonteCarloAgent
__init__	Nstep.py	/^    def __init__(self, n_states, n_actions, learning_rate, gamma, n):$/;"	m	class:NstepQLearningAgent
__init__	Q_learning.py	/^    def __init__(self, n_states, n_actions, learning_rate, gamma):$/;"	m	class:QLearningAgent
__init__	SARSA.py	/^    def __init__(self, n_states, n_actions, learning_rate, gamma):$/;"	m	class:SarsaAgent
_construct_model	Environment.py	/^    def _construct_model(self):$/;"	m	class:StochasticWindyGridworld
_initialize_Q_labels	Environment.py	/^    def _initialize_Q_labels(self):$/;"	m	class:StochasticWindyGridworld
_initialize_plot	Environment.py	/^    def _initialize_plot(self):$/;"	m	class:StochasticWindyGridworld
_location_to_state	Environment.py	/^    def _location_to_state(self,location):$/;"	m	class:StochasticWindyGridworld
_plot_arrows	Environment.py	/^    def _plot_arrows(self,Q_sa):$/;"	m	class:StochasticWindyGridworld
_state_to_location	Environment.py	/^    def _state_to_location(self,state):$/;"	m	class:StochasticWindyGridworld
add_curve	Helper.py	/^    def add_curve(self,y,label=None):$/;"	m	class:LearningCurvePlot
add_hline	Helper.py	/^    def add_hline(self,height,label):$/;"	m	class:LearningCurvePlot
argmax	Helper.py	/^def argmax(x):$/;"	f
average_over_repetitions	Experiment.py	/^def average_over_repetitions(backup, n_repetitions, n_timesteps, max_episode_length, learning_ra/;"	f
experiment	DynamicProgramming.py	/^def experiment():$/;"	f
experiment	Experiment.py	/^def experiment():$/;"	f
full_argmax	Environment.py	/^def full_argmax(x):$/;"	f
linear_anneal	Helper.py	/^def linear_anneal(t,T,start,final,percentage):$/;"	f
model	Environment.py	/^    def model(self,s,a):$/;"	m	class:StochasticWindyGridworld
monte_carlo	MonteCarlo.py	/^def monte_carlo(n_timesteps, max_episode_length, learning_rate, gamma, $/;"	f
n_step_Q	Nstep.py	/^def n_step_Q(n_timesteps, max_episode_length, learning_rate, gamma, $/;"	f
np	DynamicProgramming.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	Environment.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	Experiment.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	Helper.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	MonteCarlo.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	Nstep.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	Q_learning.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	SARSA.py	/^import numpy as np$/;"	I	nameref:module:numpy
plt	Environment.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	Helper.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
q_learning	Q_learning.py	/^def q_learning(n_timesteps, learning_rate, gamma, policy='egreedy', epsilon=None, temp=None, plo/;"	f
render	Environment.py	/^    def render(self,Q_sa=None,plot_optimal_policy=False,step_pause=0.001):$/;"	m	class:StochasticWindyGridworld
reset	Environment.py	/^    def reset(self):$/;"	m	class:StochasticWindyGridworld
sarsa	SARSA.py	/^def sarsa(n_timesteps, learning_rate, gamma, policy='egreedy', epsilon=None, temp=None, plot=Tru/;"	f
save	Helper.py	/^    def save(self,name='test.png'):$/;"	m	class:LearningCurvePlot
select_action	DynamicProgramming.py	/^    def select_action(self,s):$/;"	m	class:QValueIterationAgent
select_action	MonteCarlo.py	/^    def select_action(self, s, policy='egreedy', epsilon=None, temp=None):$/;"	m	class:MonteCarloAgent
select_action	Nstep.py	/^    def select_action(self, s, policy='egreedy', epsilon=None, temp=None):$/;"	m	class:NstepQLearningAgent
select_action	Q_learning.py	/^    def select_action(self, s, policy='egreedy', epsilon=None, temp=None):$/;"	m	class:QLearningAgent
select_action	SARSA.py	/^    def select_action(self, s, policy='egreedy', epsilon=None, temp=None):$/;"	m	class:SarsaAgent
set_ylim	Helper.py	/^    def set_ylim(self,lower,upper):$/;"	m	class:LearningCurvePlot
smooth	Helper.py	/^def smooth(y, window, poly=1):$/;"	f
softmax	Helper.py	/^def softmax(x, temp):$/;"	f
step	Environment.py	/^    def step(self,a):$/;"	m	class:StochasticWindyGridworld
test	Environment.py	/^def test():$/;"	f
test	MonteCarlo.py	/^def test():$/;"	f
test	Nstep.py	/^def test():$/;"	f
test	Q_learning.py	/^def test():$/;"	f
test	SARSA.py	/^def test():$/;"	f
update	DynamicProgramming.py	/^    def update(self,s,a,p_sas,r_sas):$/;"	m	class:QValueIterationAgent
update	MonteCarlo.py	/^    def update(self, states, actions, rewards):$/;"	m	class:MonteCarloAgent
update	Nstep.py	/^    def update(self, states, actions, rewards, done):$/;"	m	class:NstepQLearningAgent
update	Q_learning.py	/^    def update(self,s,a,r,s_next,done):$/;"	m	class:QLearningAgent
update	SARSA.py	/^    def update(self,s,a,r,s_next,a_next,done):$/;"	m	class:SarsaAgent
x	Helper.py	/^    x = np.arange(100)$/;"	v
y	Helper.py	/^    y = 0.01*x + np.random.rand(100) - 0.4 # generate some learning curve y$/;"	v
